<%- include('header', { title: 'Family Security' }) %>
<!-- Include HLS.js for browsers without native HLS support -->
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<div class="container">
    <h1 style="color: var(--text-primary); margin-bottom: 30px;">Security Cameras</h1>
    
    <div id="message" class="message"></div>
    
    <!-- Camera Grid Section -->
    <div class="camera-grid" id="cameraGrid">
        <% cameras.forEach(function(camera) { %>
            <div class="camera-card" data-name="<%= camera.name %>">
                <div class="camera-header">
                    <h2 class="camera-name"><%= camera.name %></h2>
                </div>
                <div class="camera-thumbnail" onclick="viewLiveStream('<%= camera.name %>')">
                    <% if (camera.hasFootage) { %>
                        <% if (camera.thumbnailUrl) { %>
                            <img src="<%= camera.thumbnailUrl %>" alt="<%= camera.name %> thumbnail" onerror="this.onerror=null; this.src='/images/camera-placeholder.jpg'; this.classList.add('no-thumbnail');">
                        <% } else { %>
                            <div class="no-thumbnail">No thumbnail available</div>
                        <% } %>
                    <% } else { %>
                        <div class="no-footage">No footage available</div>
                    <% } %>
                    <div class="live-indicator">CLICK FOR LIVE</div>
                </div>
                <div class="camera-actions">
                    <button class="btn btn-primary view-footage-btn" onclick="viewFootage('<%= camera.name %>', '<%= camera.name %>')">View Footage</button>
                    <button class="btn btn-success live-stream-btn" onclick="viewLiveStream('<%= camera.name %>')">Live View</button>
                </div>
            </div>
        <% }); %>
    </div>
</div>

<!-- Footage Modal -->
<div id="footageModal" class="modal">
    <div class="modal-content footage-modal-content">
        <div class="modal-header">
            <h3 id="footageModalTitle">Camera Footage</h3>
            <span class="close" onclick="closeFootageModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div class="footage-container">
                <div class="footage-sidebar">
                    <div class="date-input-container">
                        <input type="date" id="dateInput" class="form-control">
                        <button class="btn btn-primary mt-2" id="searchDateBtn" onclick="searchFootageByDate()">Search</button>
                    </div>
                    <hr>
                    <div id="dateSelector" class="date-selector">
                        <!-- Available dates will be populated here -->
                        <div class="loading">Loading dates...</div>
                    </div>
                    <div class="hour-list" id="hourList">
                        <!-- Hours and videos will be populated here -->
                        <div class="select-date-message">Please select a date</div>
                    </div>
                </div>
                <div class="footage-content">
                    <div class="video-player-container" id="videoPlayerContainer" style="display: none;">
                        <div class="video-player-header">
                            <button class="btn btn-secondary" onclick="hideVideoPlayer()">Back to List</button>
                            <div class="video-info" id="videoInfo"></div>
                        </div>
                        <div class="video-player">
                            <video id="securityVideoPlayer" controls>
                                Your browser does not support the video tag.
                            </video>
                        </div>
                        <div class="video-controls">
                            <button class="btn btn-sm btn-secondary" onclick="changePlaybackRate(0.5)">0.5x</button>
                            <button class="btn btn-sm btn-secondary" onclick="changePlaybackRate(1)">1x</button>
                            <button class="btn btn-sm btn-secondary" onclick="changePlaybackRate(2)">2x</button>
                            <button class="btn btn-sm btn-secondary" onclick="changePlaybackRate(4)">4x</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Live Stream Modal -->
<div id="liveStreamModal" class="modal">
    <div class="modal-content live-modal-content">
        <div class="modal-header">
            <h3 id="liveModalTitle">Live Stream</h3>
            <span class="close" onclick="closeLiveStreamModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div class="live-stream-container">
                <div id="liveStreamPlayer"></div>
                <div id="liveStreamStatus" class="live-status">Connecting...</div>
                <div class="live-stream-controls">
                    <button class="btn btn-primary" onclick="captureThumbFromLiveStream()">Capture Thumbnail</button>
                    <!-- -->
                    <button class="btn btn-success" onclick="toggleAudio()">Toggle Audio</button>
                   
                    <button class="btn btn-danger" onclick="stopLiveStream()">Stop Stream</button>
                    <div id="thumbCaptureStatus" class="thumbnail-status"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .camera-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .camera-card {
        background-color: var(--bg-secondary);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }
    
    .camera-card:hover {
        transform: translateY(-5px);
    }
    
    .camera-header {
        background-color: var(--bg-tertiary);
        padding: 10px 15px;
        border-bottom: 1px solid var(--border-color);
    }
    
    .camera-name {
        margin: 0;
        font-size: 18px;
        color: var(--text-primary);
    }
    
    .camera-thumbnail {
        height: 180px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--bg-primary);
        overflow: hidden;
    }
    
    .camera-thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .no-footage, .no-thumbnail {
        color: var(--text-secondary);
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        background-color: var(--bg-tertiary);
    }
    
    .camera-actions {
        padding: 15px;
        text-align: center;
    }
    
    img.no-thumbnail {
        opacity: 0.5;
        filter: grayscale(1);
    }
    
    .footage-modal-content {
        width: 90%;
        max-width: 1200px;
        height: 85vh;
        max-height: 800px;
    }
    
    .modal-body {
        height: calc(100% - 60px);
        overflow: hidden;
    }
    
    .footage-container {
        display: flex;
        height: 100%;
    }
    
    .footage-sidebar {
        width: 250px;
        background-color: var(--bg-tertiary);
        padding: 10px;
        overflow-y: auto;
        border-right: 1px solid var(--border-color);
    }
    
    .footage-content {
        flex-grow: 1;
        padding: 10px;
        overflow-y: auto;
        background-color: var(--bg-primary);
        display: flex;
    }
    
    .live-modal-content {
        width: 80%;
        height: 90vh;
        max-width: 1200px;
        max-height: 800px;
    }
    
    .live-stream-container {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        position: relative;
    }
    
    #liveStreamPlayer {
        flex-grow: 1;
        background-color: #000;
        position: relative;
        min-height: 400px;
        width: 100%;
    }
    
    .live-status {
        padding: 1px;
        text-align: center;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        position: absolute;
        bottom: 86px;
        width: 100%;
    }
    
    .live-stream-controls {
        padding: 10px;
        text-align: center;
        background-color: var(--bg-secondary);
        display: flex;
        justify-content: center;
        gap: 15px;
        flex-wrap: wrap;
    }
    
    .thumbnail-status {
        width: 100%;
        margin-top: 10px;
        font-size: 0.9em;
        color: var(--text-secondary);
        transition: opacity 0.5s ease;
        opacity: 0;
    }
    
    .thumbnail-status.show {
        opacity: 1;
    }
    
    .camera-thumbnail {
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .camera-thumbnail:hover {
        opacity: 0.8;
    }
    
    .live-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(255, 0, 0, 0.7);
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 12px;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .camera-thumbnail:hover .live-indicator {
        opacity: 1;
    }
    
    .date-item {
        padding: 10px 12px;
        border-radius: 4px;
        margin-bottom: 5px;
        transition: background-color 0.2s ease;
        text-align: center;
        font-size: 1.1em;
        font-weight: 500;
    }
    
    .date-item:hover {
        background-color: var(--bg-secondary);
    }
    
    .date-input-container {
        padding: 10px 0;
        margin-bottom: 10px;
    }
    
    .date-selector {
        max-height: 200px;
        overflow-y: auto;
        margin-top: 10px;
    }
    
    .date-item.active {
        background-color: var(--accent-primary);
        color: white;
    }
    
    .hour-list {
        padding: 5px 0;
        margin-top: 10px;
        max-height: 100%;
        overflow-y: auto;
    }
    
    .hour-group {
        margin-bottom: 8px;
        background-color: var(--bg-secondary);
        border-radius: 6px;
        overflow: hidden;
        font-size: 0.9em;
    }
    
    .hour-header {
        padding: 8px 10px;
        background-color: var(--bg-tertiary);
        cursor: pointer;
        display: grid;
        grid-template-columns: 100px 1fr 30px;
        align-items: center;
        font-weight: bold;
    }
    
    .hour-time {
        font-weight: bold;
    }
    
    .motion-count {
        font-size: 0.9em;
        color: var(--text-secondary);
        text-align: left;
        padding-left: 10px;
    }
    
    .expand-icon {
        text-align: center;
    }
    
    .hour-header:hover {
        background-color: var(--accent-secondary);
    }
    
    .hour-content {
        padding: 0;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease;
    }
    
    .hour-content.expanded {
        max-height: 500px;
        overflow-y: auto;
    }
    
    .video-item {
        padding: 6px 8px 6px 15px;
        cursor: pointer;
        border-bottom: 1px solid var(--border-color);
        transition: all 0.2s ease;
        font-size: 0.85em;
        position: relative;
        display: grid;
        grid-template-columns: 30% 65%;
        align-items: start;
    }
    
    .video-timestamp {
        font-weight: bold;
    }
    
    .motion-details {
        color: var(--text-secondary);
        font-size: 0.9em;
        line-height: 1.3;
        padding-left: 15px;
    }
    
    .no-motion {
        font-style: italic;
        color: #999;
    }
    
    .video-item:hover {
        background-color: var(--bg-hover);
    }
    
    .video-item.active {
        background-color: var(--accent-primary);
        color: white;
        font-weight: bold;
        box-shadow: 0 0 4px var(--accent-primary);
        position: relative;
    }
    
    .video-item.active::before {
        content: '▶';
        position: absolute;
        left: 3px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 0.7em;
    }
    
    .video-player-container {
        background-color: var(--bg-secondary);
        border-radius: 8px;
        padding: 15px;
        width: 100%;
        max-width: 900px;
    }
    
    .video-player {
        width: 100%;
        margin-bottom: 15px;
    }
    
    .video-player video {
        width: 100%;
        max-height: 500px;
        background-color: black;
    }
    
    .video-controls {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 10px;
    }
    
    .video-player-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .select-date-message {
        text-align: center;
        padding: 50px 0;
        color: var(--text-secondary);
    }
    
    .loading {
        text-align: center;
        padding: 20px 0;
        color: var(--text-secondary);
    }
</style>

<script>
    let currentCameraName = null;
    let currentDate = null;
    let liveVideoElement = null;
    
    // View footage for a specific camera
    function viewFootage(cameraName) {
        currentCameraName = cameraName;
        
        // Update modal title
        document.getElementById('footageModalTitle').textContent = `${cameraName} - Footage`;
        
        // Clear previous content
        document.getElementById('dateSelector').innerHTML = '<div class="loading">Loading dates...</div>';
        document.getElementById('hourList').innerHTML = '<div class="select-date-message">Please select a date</div>';
        
        // Initialize the date input with today's date
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        document.getElementById('dateInput').value = `${year}-${month}-${day}`;
        
        // Hide video player
        document.getElementById('videoPlayerContainer').style.display = 'none';
        
        // Show the modal
        const modal = document.getElementById('footageModal');
        modal.style.display = 'block';
        modal.classList.add('show');
        
        // Load dates for this camera
        loadDates(cameraName);
    }
    
    // Load available dates for a camera
    function loadDates(cameraName) {
        fetch(`/api/security/footage-dates/${cameraName}`)
            .then(response => response.json())
            .then(data => {
                const dateSelector = document.getElementById('dateSelector');
                
                if (data.status === 'success' && data.dates && data.dates.length > 0) {
                    // Store available dates in a global variable for reference but don't display them all
                    window.availableDates = data.dates;
                    
                    // Auto-select the first date
                    if (data.dates.length > 0) {
                        selectDate(data.dates[0]);
                    }
                } else {
                    dateSelector.innerHTML = '<div class="no-footage">No footage available</div>';
                }
            })
            .catch(error => {
                console.error('Error loading dates:', error);
                document.getElementById('dateSelector').innerHTML = '<div class="error">Error loading dates</div>';
            });
    }
    
    // Select a date and load hours
    function selectDate(date) {
        currentDate = date;
        
        // Display only the current selected date
        const dateSelector = document.getElementById('dateSelector');
        
        // Format date for display (assuming date is in YYYYMMDD format)
        let displayDate = date;
        if (date.length === 8) {
            displayDate = `${date.slice(0, 4)}-${date.slice(4, 6)}-${date.slice(6, 8)}`;
        }
        
        // Set the dateInput field to match the selected date
        const dateInput = document.getElementById('dateInput');
        dateInput.value = displayDate;
        
        // Update the date selector to show only the current date
        dateSelector.innerHTML = `<div class="date-item active">${displayDate}</div>`;
        
        // Show loading in hour list
        document.getElementById('hourList').innerHTML = '<div class="loading">Loading footage...</div>';
        
        // Hide video player
        document.getElementById('videoPlayerContainer').style.display = 'none';
        
        // Load hours for this date
        loadHours(currentCameraName, date);
    }
    
    // Load hours with footage for selected date
    function loadHours(cameraName, date) {
        // First fetch motion events data
        Promise.all([
            fetch(`/api/security/footage-hours/${cameraName}/${date}`).then(response => response.json()),
            fetch(`/api/motion/events/${cameraName}/${date}`).then(response => response.json())
        ])
        .then(([footageData, motionData]) => {
            const hourList = document.getElementById('hourList');
            const motionEvents = motionData.status === 'success' ? motionData.events || [] : [];
            
            // Create a map of hour to motion events count
            const motionCountsByHour = {};
            // Create a map of specific footage file to motion events
            const motionTimesByFootage = {};
            
            // Process motion events
            motionEvents.forEach(event => {
                // Get hour from event.time (format: HHMMSS)
                const hour = event.time.substring(0, 2);
                const minutes = event.time.substring(2, 4);
                const seconds = event.time.substring(4, 6);
                
                // Increment count for this hour
                if (!motionCountsByHour[hour]) {
                    motionCountsByHour[hour] = 0;
                }
                motionCountsByHour[hour]++;
                
                // Format the time as HH:MM:SS
                const formattedTime = `${hour}:${minutes}:${seconds}`;
                
                // Add motion details
                let detailText = `${formattedTime}`;
                if (event.detections?.length > 0) {
                    detailText += ` - ${event.detections.join(',')}`;
                }
                
                // We'll later find the right footage file to associate this event with
                // Store event by its time for later mapping
                if (!motionTimesByFootage[`event-${event.time}`]) {
                    motionTimesByFootage[`event-${event.time}`] = {
                        hour: parseInt(hour),
                        minute: parseInt(minutes),
                        second: parseInt(seconds),
                        text: detailText,
                        matched: false
                    };
                }
            });
            
            if (footageData.status === 'success' && footageData.hours && footageData.hours.length > 0) {
                let hoursHtml = '';
                
                footageData.hours.forEach(hourData => {
                    const hourLabel = formatHour(hourData.hour);
                    const motionCount = motionCountsByHour[hourData.hour] || 0;
                    
                    hoursHtml += `
                        <div class="hour-group">
                            <div class="hour-header" onclick="toggleHourExpansion(this)">
                                <span class="hour-time">${hourLabel}</span>
                                <span class="motion-count">${motionCount > 0 ? `( ${motionCount} )` : ''}</span>
                                <span class="expand-icon">+</span>
                            </div>
                            <div class="hour-content">
                    `;
                    
                    // Add videos for this hour
                    hourData.files.forEach(file => {
                        const timestamp = formatTimestamp(file);
                        const videoItemId = `video-${cameraName}-${date}-${file.replace(/\./g, '-')}`;
                        
                        // Extract timestamp from filename (YYYYMMDD-HHMMSS-120.mp4)
                        const fileMatch = file.match(/(\d{8})-(\d{6})-\d+\.mp4$/);
                        
                        // Get motion events specific to this footage file
                        let motionDetailsForThisFootage = [];
                        
                        if (fileMatch) {
                            const fileDate = fileMatch[1];
                            const fileTime = fileMatch[2];
                            
                            // Get the start and end times for this footage
                            // Format: HHMMSS
                            const fileHour = parseInt(fileTime.substring(0, 2));
                            const fileMinute = parseInt(fileTime.substring(2, 4));
                            const fileSecond = parseInt(fileTime.substring(4, 6));
                            
                            // Calculate the end time (considering 2-minute segments)
                            let fileEndHour = fileHour;
                            let fileEndMinute = fileMinute + 2;
                            let fileEndSecond = fileSecond;
                            
                            // Handle minute overflow
                            if (fileEndMinute >= 60) {
                                fileEndHour = (fileEndHour + 1) % 24;
                                fileEndMinute = fileEndMinute % 60;
                            }
                            
                            // Find all motion events that fall within this footage's time range
                            Object.keys(motionTimesByFootage).forEach(key => {
                                if (key.startsWith('event-')) {
                                    const eventData = motionTimesByFootage[key];
                                    const { hour: eventHour, minute: eventMinute, second: eventSecond } = eventData;
                                    
                                    // Check if event falls within this footage's time range
                                    let isInRange = false;
                                    
                                    if (fileHour === fileEndHour) {
                                        // Same hour for start and end
                                        if (eventHour === fileHour) {
                                            // Event in the same hour
                                            const eventMinuteSeconds = eventMinute * 60 + eventSecond;
                                            const fileStartMinuteSeconds = fileMinute * 60 + fileSecond;
                                            const fileEndMinuteSeconds = fileEndMinute * 60 + fileEndSecond;
                                            
                                            isInRange = (eventMinuteSeconds >= fileStartMinuteSeconds && 
                                                        eventMinuteSeconds < fileEndMinuteSeconds);
                                        }
                                    } else {
                                        // Footage spans across hour boundary
                                        if (eventHour === fileHour) {
                                            // Event in start hour
                                            const eventMinuteSeconds = eventMinute * 60 + eventSecond;
                                            const fileStartMinuteSeconds = fileMinute * 60 + fileSecond;
                                            
                                            isInRange = (eventMinuteSeconds >= fileStartMinuteSeconds);
                                        } else if (eventHour === fileEndHour) {
                                            // Event in end hour
                                            const eventMinuteSeconds = eventMinute * 60 + eventSecond;
                                            const fileEndMinuteSeconds = fileEndMinute * 60 + fileEndSecond;
                                            
                                            isInRange = (eventMinuteSeconds < fileEndMinuteSeconds);
                                        }
                                    }
                                    
                                    if (isInRange) {
                                        motionDetailsForThisFootage.push(eventData.text);
                                        eventData.matched = true;
                                    }
                                }
                            });
                        }
                        
                        const motionHtml = motionDetailsForThisFootage.length > 0 ? 
                            `<div class="motion-details">${motionDetailsForThisFootage.join('<br>')}</div>` : 
                            '<div class="no-motion"></div>';
                        
                        hoursHtml += `
                            <div id="${videoItemId}" class="video-item" onclick="playVideo('${cameraName}', '${date}', '${file}', '${timestamp}', this)">
                                <div class="video-timestamp">${timestamp}</div>
                                ${motionHtml}
                            </div>
                        `;
                    });
                    
                    hoursHtml += `
                            </div>
                        </div>
                    `;
                });
                
                hourList.innerHTML = hoursHtml;
            } else {
                hourList.innerHTML = '<div class="no-footage">No footage available for this date</div>';
            }
        })
        .catch(error => {
            console.error('Error loading data:', error);
            document.getElementById('hourList').innerHTML = '<div class="error">Error loading footage</div>';
        });
    }
    
    // Toggle hour expansion
    function toggleHourExpansion(element) {
        const content = element.nextElementSibling;
        const expandIcon = element.querySelector('.expand-icon');
        
        if (content.classList.contains('expanded')) {
            content.classList.remove('expanded');
            expandIcon.textContent = '+';
        } else {
            content.classList.add('expanded');
            expandIcon.textContent = '-';
        }
    }
    
    // Play selected video
    function playVideo(cameraName, date, filename, timestamp, element) {
        const videoPlayer = document.getElementById('securityVideoPlayer');
        const videoContainer = document.getElementById('videoPlayerContainer');
        const videoInfo = document.getElementById('videoInfo');
        
        // Clear any previously selected video items
        const allVideoItems = document.querySelectorAll('.video-item');
        allVideoItems.forEach(item => item.classList.remove('active'));
        
        // Highlight the clicked video item
        element.classList.add('active');
        
        // Show loading information
        videoContainer.style.display = 'block';
        videoInfo.textContent = `Loading: ${timestamp}`;
        
        // Get video path using the API that will handle the mapping to camera name
        fetch(`/api/security/video-info/${cameraName}/${date}/${filename}`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Set video source - path is already mapped to camera name
                    videoPlayer.src = data.info.path;
                    videoPlayer.load();
                    videoInfo.textContent = `${timestamp} (${data.info.size})`;
                } else {
                    videoInfo.textContent = 'Error loading video';
                    console.error('Error:', data.message);
                }
            })
            .catch(error => {
                videoInfo.textContent = 'Error loading video';
                console.error('Error fetching video info:', error);
            });
        
        // Play when ready
        videoPlayer.oncanplay = function() {
            videoPlayer.play();
            videoInfo.textContent = timestamp;
            
            // // Set a timeout to capture thumbnail after video has been playing for a bit
            // setTimeout(() => {
            //     captureThumbnail(videoPlayer, cameraName);
            // }, 3000); // Wait 3 seconds for video to stabilize before capturing
        };
        
        // Handle errors
        videoPlayer.onerror = function() {
            videoInfo.textContent = `Error loading video: ${timestamp}`;
        };
    }
    
    // Capture thumbnail from video
    function captureThumbnail(videoElement, cameraName) {
        try {
            // Create a canvas element to capture the current frame
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            
            // Set canvas dimensions to a smaller size to reduce payload
            // Maximum thumbnail dimensions: 320x180 (16:9 ratio)
            const MAX_WIDTH = 320;
            const MAX_HEIGHT = 180;
            
            // Calculate the size to maintain aspect ratio
            let width = videoElement.videoWidth;
            let height = videoElement.videoHeight;
            
            if (width > height) {
                if (width > MAX_WIDTH) {
                    height = Math.round(height * (MAX_WIDTH / width));
                    width = MAX_WIDTH;
                }
            } else {
                if (height > MAX_HEIGHT) {
                    width = Math.round(width * (MAX_HEIGHT / height));
                    height = MAX_HEIGHT;
                }
            }
            
            // Set canvas size to our reduced dimensions
            canvas.width = width;
            canvas.height = height;
            
            // Draw the video frame on the canvas with resized dimensions
            context.drawImage(videoElement, 0, 0, width, height);
            
            // Convert the canvas to a blob instead of data URL
            canvas.toBlob(function(blob) {
                // Create form data
                const formData = new FormData();
                formData.append('cameraName', cameraName);
                formData.append('thumbnail', blob, `${cameraName}.jpg`);
                
                // Send the thumbnail to the server using FormData
                fetch('/api/security/save-thumbnail', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        console.error('Error saving thumbnail:', response.status);
                        throw new Error('Server responded with an error');
                    }
                })
                .then(data => {
                    if (data.status === 'success') {
                        console.log('Thumbnail saved successfully');
                    } else {
                        console.error('Error saving thumbnail:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Failed to save thumbnail:', error);
                });
            }, 'image/jpeg', 0.6); // 0.6 quality for JPEG
        } catch (error) {
            console.error('Error capturing thumbnail:', error);
        }
    }
    
    // Hide video player and show hour list
    function hideVideoPlayer() {
        document.getElementById('videoPlayerContainer').style.display = 'none';
        document.getElementById('securityVideoPlayer').pause();
        
        // Clear any selected video items
        const allVideoItems = document.querySelectorAll('.video-item');
        allVideoItems.forEach(item => item.classList.remove('active'));
    }
    
    // Change video playback rate
    function changePlaybackRate(rate) {
        const video = document.getElementById('securityVideoPlayer');
        video.playbackRate = rate;
    }
    
    // Close the footage modal
    function closeFootageModal() {
        const modal = document.getElementById('footageModal');
        const videoPlayer = document.getElementById('securityVideoPlayer');
        
        // Stop video playback
        if (videoPlayer) {
            videoPlayer.pause();
        }
        
        // Clear any selected video items
        const allVideoItems = document.querySelectorAll('.video-item');
        allVideoItems.forEach(item => item.classList.remove('active'));
        
        modal.classList.remove('show');
        setTimeout(() => {
            modal.style.display = 'none';
        }, 300);
        
        // Reset variables
        currentCameraName = null;
        currentDate = null;
    }
        
    // Format hour for display
    function formatHour(hour) {
        const hourNum = parseInt(hour);
        if (hourNum === 0) return '12 AM';
        if (hourNum === 12) return '12 PM';
        return hourNum < 12 ? `${hourNum} AM` : `${hourNum - 12} PM`;
    }
    
    // Format timestamp from filename
    function formatTimestamp(filename) {
        // Handle format: YYYYMMDD-HHMMSS-120.mp4
        const match = filename.match(/(\d{8})-(\d{2})(\d{2})(\d{2})-\d+\.mp4$/);
        if (match) {
            const [_, datePart, hours, minutes, seconds] = match;
            return `${hours}:${minutes}:${seconds}`;
        }
        return filename; // Return original if format doesn't match
    }
    
    // Format motion time from HHMMSS format
    function formatMotionTime(timeStr) {
        if (timeStr && timeStr.length === 6) {
            return `${timeStr.substring(0, 2)}:${timeStr.substring(2, 4)}:${timeStr.substring(4, 6)}`;
        }
        return timeStr; // Return original if format doesn't match
    }
    
    // Search for footage by specific date
    function searchFootageByDate() {
        const dateInput = document.getElementById('dateInput');
        if (!dateInput.value) {
            alert('Please select a date first');
            return;
        }
        
        // Format date from YYYY-MM-DD to match API expectation
        const selectedDate = dateInput.value.replace(/-/g, "");
        
        // Check if this date exists in the available dates (if we have that info)
        let dateExists = false;
        if (window.availableDates && Array.isArray(window.availableDates)) {
            dateExists = window.availableDates.includes(selectedDate);
        }
        
        if (dateExists) {
            // If date exists in our list, just select it
            selectDate(selectedDate);
        } else {
            // Otherwise, make a direct API call to search for this date
            document.getElementById('hourList').innerHTML = '<div class="loading">Searching for footage...</div>';
            
            // Using the camera name directly
            fetch(`/api/security/search-footage/${currentCameraName}/${selectedDate}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        // If found, update the date selector to include this date
                        loadDates(currentCameraName);
                        
                        // Then select this date
                        selectDate(selectedDate);
                    } else {
                        document.getElementById('hourList').innerHTML = 
                            '<div class="no-footage">No footage found for the selected date</div>';
                    }
                })
                .catch(error => {
                    console.error('Error searching for footage:', error);
                    document.getElementById('hourList').innerHTML = 
                        '<div class="error">Error searching for footage</div>';
                });
        }
    }
    
    // Close modal when clicking outside
    window.onclick = function(event) {
        const footageModal = document.getElementById('footageModal');
        if (event.target === footageModal) {
            closeFootageModal();
        }
        
        const liveModal = document.getElementById('liveStreamModal');
        if (event.target === liveModal) {
            closeLiveStreamModal();
        }
    }
    
    // ESC key to close modal
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const modal = document.getElementById('footageModal');
            if (modal.style.display === 'block' || modal.classList.contains('show')) {
                closeFootageModal();
            }
            
            const liveModal = document.getElementById('liveStreamModal');
            if (liveModal && (liveModal.style.display === 'block')) {
                closeLiveStreamModal();
            }
        }
    });
    
    // Open the live stream modal and start HLS stream
    function viewLiveStream(cameraName) {
        // Set the current camera name
        currentCameraName = cameraName;
        
        // Set the modal title and display the modal
        document.getElementById('liveModalTitle').textContent = cameraName + ' - Live Stream';
        document.getElementById('liveStreamModal').style.display = 'block';
        document.getElementById('liveStreamStatus').textContent = 'Connecting...';
        
        // Get HLS URL from our server
        fetch(`/api/security/live-stream/${cameraName}`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Start HLS stream
                    startHLSStream(data.hlsUrl);
                } else {
                    document.getElementById('liveStreamStatus').textContent = 'Error: ' + data.message;
                }
            })
            .catch(error => {
                console.error('Error fetching stream info:', error);
                document.getElementById('liveStreamStatus').textContent = 'Connection Error: ' + error.message;
            });
    }
    
    // Close the live stream modal and clean up
    function closeLiveStreamModal() {
        document.getElementById('liveStreamModal').style.display = 'none';
        stopLiveStream();
        // Reset current camera name
        currentCameraName = null;
    }
    
    // Stop the live stream and clean up resources
    function stopLiveStream() {
        // Clear the player
        document.getElementById('liveStreamPlayer').innerHTML = '';
        document.getElementById('liveStreamStatus').textContent = 'Stream stopped';
        
        // Reset video element reference and camera name
        liveVideoElement = null;
        
        // Hide thumbnail status
        const statusElement = document.getElementById('thumbCaptureStatus');
        statusElement.textContent = '';
        statusElement.classList.remove('show');
    }
    
    // Capture thumbnail from live stream
    function captureThumbFromLiveStream(isAutoCapture = false) {
        if (!liveVideoElement) {
            console.error('No live video element available');
            return;
        }
        
        // Check if we have a valid camera name
        if (!currentCameraName) {
            console.error('No camera name available for thumbnail capture');
            return;
        }
        
        console.log(`Capturing thumbnail for camera: ${currentCameraName}`);
        
        const statusElement = document.getElementById('thumbCaptureStatus');
        statusElement.textContent = 'Capturing thumbnail...';
        statusElement.classList.add('show');
        
        try {
            // Create a canvas element to capture the current frame
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            
            // Set canvas dimensions to a smaller size to reduce payload
            const MAX_WIDTH = 320;
            const MAX_HEIGHT = 180;
            
            // Make sure video is actually playing
            if (liveVideoElement.paused || liveVideoElement.ended) {
                console.warn('Video is paused or ended. Current readyState:', liveVideoElement.readyState);
                statusElement.textContent = 'Error: Video not playing';
                return;
            }
            
            // Calculate the size to maintain aspect ratio
            let width = liveVideoElement.videoWidth;
            let height = liveVideoElement.videoHeight;
            
            if (width === 0 || height === 0) {
                console.warn(`Invalid video dimensions: ${width}x${height}`);
                statusElement.textContent = 'Error: Stream not ready for capture';
                return;
            }
            
            if (width > height) {
                if (width > MAX_WIDTH) {
                    height = Math.round(height * (MAX_WIDTH / width));
                    width = MAX_WIDTH;
                }
            } else {
                if (height > MAX_HEIGHT) {
                    width = Math.round(width * (MAX_HEIGHT / height));
                    height = MAX_HEIGHT;
                }
            }
            
            // Set canvas size
            canvas.width = width;
            canvas.height = height;
            
            try {
                // Draw the video frame on the canvas with resized dimensions
                context.drawImage(liveVideoElement, 0, 0, width, height);
                console.log(`Successfully drew video frame to canvas (${width}x${height})`);
            } catch (err) {
                console.error('Error drawing video to canvas:', err);
                statusElement.textContent = 'Error: Failed to capture video frame';
                return;
            }
            
            // Convert the canvas to a blob
            canvas.toBlob(function(blob) {
                // Create form data
                const formData = new FormData();
                formData.append('cameraName', currentCameraName);
                formData.append('thumbnail', blob, `${currentCameraName}.jpg`);
                
                // Send the thumbnail to the server
                fetch('/api/security/save-thumbnail', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Server responded with an error');
                    }
                })
                .then(data => {
                    if (data.status === 'success') {
                        statusElement.textContent = isAutoCapture ? 'Auto-thumbnail captured' : 'Thumbnail captured successfully';
                        setTimeout(() => {
                            statusElement.classList.remove('show');
                        }, 3000);
                    } else {
                        statusElement.textContent = 'Error: ' + data.message;
                    }
                })
                .catch(error => {
                    console.error('Failed to save thumbnail:', error);
                    statusElement.textContent = 'Error: Failed to save thumbnail';
                });
            }, 'image/jpeg', 0.8);
        } catch (error) {
            console.error('Error capturing thumbnail:', error);
            statusElement.textContent = 'Error: ' + error.message;
        }
    }
    
    // Toggle audio for the live stream
    function toggleAudio() {
        if (!liveVideoElement) {
            console.error('No live video element available');
            return;
        }
        
        // Toggle the muted state
        liveVideoElement.muted = !liveVideoElement.muted;
        
        // Show audio status in the live stream status
        document.getElementById('liveStreamStatus').textContent = 
            'Connected - Live Stream (' + (liveVideoElement.muted ? 'Audio Off' : 'Audio On') + ')';
    }
    
    // Function to start HLS stream
    function startHLSStream(hlsUrl) {
        
        let hlsRestartCount = 0;
        let thumbnailTimer = null;
        
        // Create a video element for the stream
        const videoElement = document.createElement('video');
        videoElement.autoplay = true;
        videoElement.controls = true;
        videoElement.playsInline = true;
        videoElement.muted = true; // Initially muted for autoplay (will be unmuted after playback starts)
        videoElement.crossOrigin = 'anonymous'; // Enable CORS for canvas export
        videoElement.style.width = '100%';
        videoElement.style.height = '100%';
        videoElement.dataset.cameraName = currentCameraName;
        
        // Store reference to the video element for later use
        liveVideoElement = videoElement;
        
        // Clear previous content and add video element
        const playerContainer = document.getElementById('liveStreamPlayer');
        playerContainer.innerHTML = '';
        playerContainer.appendChild(videoElement);
        
        // Reset thumbnail capture status
        document.getElementById('thumbCaptureStatus').textContent = '';
        document.getElementById('thumbCaptureStatus').classList.remove('show');
        
        document.getElementById('liveStreamStatus').textContent = 'Connecting...';
        
        // Check if the browser supports HLS natively
        if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
            // Use native HLS support
            videoElement.src = hlsUrl;
            
            // Add event listeners
            videoElement.addEventListener('playing', function() {
                // Unmute the video after it starts playing
                console.log(`restart count reset to ${hlsRestartCount}`);
                hlsRestartCount = 0;
                videoElement.muted = false;
                document.getElementById('liveStreamStatus').textContent = 'Connected - Live Stream (Audio On)';
                
                // Automatically capture thumbnail after 3 seconds of playback
                if(thumbnailTimer == null) {
                    thumbnailTimer = setTimeout(() => {
                        thumbnailTimer = null;
                        captureThumbFromLiveStream(true);
                    }, 3000);
                }
            });
            
            videoElement.addEventListener('error', function(e) {
                console.error('Video error:', videoElement.error);
                if(videoElement.error?.code == 4) {
                    // console.error('Media source error - possibly network issue or unsupported format');
                    console.log(`trying to reload the video source: ${hlsRestartCount}`);
                    hlsRestartCount++;
                    if(hlsRestartCount < 3) {
                        if(thumbnailTimer) clearTimeout(thumbnailTimer);
                        thumbnailTimer = null;
                        document.getElementById('liveStreamStatus').textContent = 'Reconnecting... (Attempt ' + hlsRestartCount + ')';
                        setTimeout(() => {
                            videoElement.load();
                        }, 1500);
                    }
                    else {
                        document.getElementById('liveStreamStatus').textContent = 'Stream Error: Unable to play stream after multiple attempts';
                    }
                }
                document.getElementById('liveStreamStatus').textContent = 'Stream Error: ' + (videoElement.error ? videoElement.error.message : 'Unknown error');
            });
            
            // Start loading the video
            videoElement.load();
        } else if (Hls && Hls.isSupported()) {
            // Use hls.js for browsers without native support
            const hls = new Hls({
                debug: false,
                enableWorker: true,
                lowLatencyMode: true,
                backBufferLength: 0
            });
            
            hls.loadSource(hlsUrl);
            hls.attachMedia(videoElement);
            
            hls.on(Hls.Events.MANIFEST_PARSED, function() {
                videoElement.play()
                    .then(() => {
                        // Unmute the video after it starts playing
                        videoElement.muted = false;
                        document.getElementById('liveStreamStatus').textContent = 'Connected - Live Stream (Audio On)';
                        
                        // Automatically capture thumbnail after 3 seconds of playback
                        thumbnailTimer = setTimeout(() => {
                            captureThumbFromLiveStream(true);
                        }, 3000);
                    })
                    .catch(error => {
                        console.warn('Auto-play was prevented:', error);
                        document.getElementById('liveStreamStatus').textContent = 'Click to play';
                    });
            });
            
            hls.on(Hls.Events.ERROR, function(event, data) {
                if (data.fatal) {
                    console.error('HLS error:', data);
                    document.getElementById('liveStreamStatus').textContent = 'Stream Error: ' + data.type;
                    
                    if (data.type === Hls.ErrorTypes.NETWORK_ERROR) {
                        // Try to recover network error
                        hls.startLoad();
                    } else if (data.type === Hls.ErrorTypes.MEDIA_ERROR) {
                        // Try to recover media error
                        hls.recoverMediaError();
                    } else {
                        // Cannot recover
                        hls.destroy();
                    }
                }
            });
        } else {
            // Neither native support nor hls.js available
            document.getElementById('liveStreamStatus').textContent = 'Error: HLS playback not supported in this browser';
            console.error('HLS is not supported in this browser');
        }
        
        // Attempt to play (might be blocked by browser autoplay policies)
        const playPromise = videoElement.play();
        
        if (playPromise !== undefined) {
            playPromise.catch(error => {
                console.warn('Auto-play was prevented:', error);
                document.getElementById('liveStreamStatus').textContent = 'Click to play';
                
                // Add a click listener to the video element to handle user interaction
                // This helps with browsers that require user interaction before allowing unmuted playback
                videoElement.addEventListener('click', function onClickToPlay() {
                    videoElement.play()
                        .then(() => {
                            videoElement.muted = false;
                            document.getElementById('liveStreamStatus').textContent = 'Connected - Live Stream (Audio On)';
                            // Remove the listener after it's been used
                            videoElement.removeEventListener('click', onClickToPlay);
                        });
                }, { once: true });
            });
        }
    }
</script>

<%- include('footer') %>